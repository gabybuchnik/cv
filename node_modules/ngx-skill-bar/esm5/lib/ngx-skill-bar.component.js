/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input } from "@angular/core";
import { Bar } from "./bar.model";
var NgxSkillBarComponent = /** @class */ (function () {
    function NgxSkillBarComponent() {
        this.percentage = 0;
        this.numberOfBars = 5;
        this.standarWidthBar = 20;
    }
    /**
     * @return {?}
     */
    NgxSkillBarComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.init();
    };
    /**
     * @return {?}
     */
    NgxSkillBarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.init();
    };
    /**
     * @return {?}
     */
    NgxSkillBarComponent.prototype.init = /**
     * @return {?}
     */
    function () {
        this.standarWidthBar = 100 / this.numberOfBars;
        this.bars = tslib_1.__spread(this.generateLine());
    };
    /**
     * @return {?}
     */
    NgxSkillBarComponent.prototype.generateLine = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ bars = [];
        for (var /** @type {?} */ i = 1; i <= this.numberOfBars; i++) {
            bars = tslib_1.__spread(bars, [new Bar(this.calculateBar(i))]);
        }
        return bars;
    };
    /**
     * @param {?} indexBar
     * @return {?}
     */
    NgxSkillBarComponent.prototype.calculateBar = /**
     * @param {?} indexBar
     * @return {?}
     */
    function (indexBar) {
        var /** @type {?} */ substraction = this.percentage - (indexBar - 1) * this.standarWidthBar;
        if (this.percentage >= indexBar * this.standarWidthBar) {
            return 100;
        }
        else if (substraction > 0) {
            return (substraction * 100) / this.standarWidthBar;
        }
        return 0;
    };
    NgxSkillBarComponent.decorators = [
        { type: Component, args: [{
                    selector: "ngx-skill-bar",
                    template: "\n    <statistics-list-bar [full]=\"full\" [barWidth]=\"barWidth\" [showFigures]=\"showFigures\" [percentage]=\"percentage\" [bars]=\"bars\" [bgColor]=\"bgColor\" [color]=\"color\"></statistics-list-bar>\n  ",
                    styles: []
                },] },
    ];
    /** @nocollapse */
    NgxSkillBarComponent.ctorParameters = function () { return []; };
    NgxSkillBarComponent.propDecorators = {
        percentage: [{ type: Input }],
        numberOfBars: [{ type: Input }],
        showFigures: [{ type: Input }],
        bgColor: [{ type: Input }],
        color: [{ type: Input }],
        barWidth: [{ type: Input }],
        full: [{ type: Input }]
    };
    return NgxSkillBarComponent;
}());
export { NgxSkillBarComponent };
function NgxSkillBarComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    NgxSkillBarComponent.prototype.percentage;
    /** @type {?} */
    NgxSkillBarComponent.prototype.numberOfBars;
    /** @type {?} */
    NgxSkillBarComponent.prototype.showFigures;
    /** @type {?} */
    NgxSkillBarComponent.prototype.bgColor;
    /** @type {?} */
    NgxSkillBarComponent.prototype.color;
    /** @type {?} */
    NgxSkillBarComponent.prototype.barWidth;
    /** @type {?} */
    NgxSkillBarComponent.prototype.full;
    /** @type {?} */
    NgxSkillBarComponent.prototype.standarWidthBar;
    /** @type {?} */
    NgxSkillBarComponent.prototype.bars;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNraWxsLWJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2tpbGwtYmFyLyIsInNvdXJjZXMiOlsibGliL25neC1za2lsbC1iYXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDcEUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGFBQWEsQ0FBQzs7SUFxQmhDOzBCQVg4QixDQUFDOzRCQUNQLENBQUM7K0JBT0MsRUFBRTtLQUdaOzs7O0lBRWhCLDBDQUFXOzs7SUFBWDtRQUNFLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUNiOzs7O0lBRUQsdUNBQVE7OztJQUFSO1FBQ0UsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0tBQ2I7Ozs7SUFFRCxtQ0FBSTs7O0lBQUo7UUFDRSxJQUFJLENBQUMsZUFBZSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQy9DLElBQUksQ0FBQyxJQUFJLG9CQUFPLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO0tBQ3RDOzs7O0lBRUQsMkNBQVk7OztJQUFaO1FBQ0UscUJBQUksSUFBSSxHQUFVLEVBQUUsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxxQkFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDNUMsSUFBSSxvQkFBTyxJQUFJLEdBQUUsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUM7U0FDakQ7UUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDO0tBQ2I7Ozs7O0lBRUQsMkNBQVk7Ozs7SUFBWixVQUFhLFFBQWdCO1FBQzNCLHFCQUFNLFlBQVksR0FDaEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDO1FBQzFELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO1lBQ3ZELE1BQU0sQ0FBQyxHQUFHLENBQUM7U0FDWjtRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1QixNQUFNLENBQUMsQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztTQUNwRDtRQUNELE1BQU0sQ0FBQyxDQUFDLENBQUM7S0FDVjs7Z0JBbkRGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZUFBZTtvQkFDekIsUUFBUSxFQUFFLGlOQUVUO29CQUNELE1BQU0sRUFBRSxFQUFFO2lCQUNYOzs7Ozs2QkFFRSxLQUFLOytCQUNMLEtBQUs7OEJBQ0wsS0FBSzswQkFDTCxLQUFLO3dCQUNMLEtBQUs7MkJBQ0wsS0FBSzt1QkFDTCxLQUFLOzsrQkFqQlI7O1NBVWEsb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBPbkNoYW5nZXMgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgQmFyIH0gZnJvbSBcIi4vYmFyLm1vZGVsXCI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJuZ3gtc2tpbGwtYmFyXCIsXG4gIHRlbXBsYXRlOiBgXG4gICAgPHN0YXRpc3RpY3MtbGlzdC1iYXIgW2Z1bGxdPVwiZnVsbFwiIFtiYXJXaWR0aF09XCJiYXJXaWR0aFwiIFtzaG93RmlndXJlc109XCJzaG93RmlndXJlc1wiIFtwZXJjZW50YWdlXT1cInBlcmNlbnRhZ2VcIiBbYmFyc109XCJiYXJzXCIgW2JnQ29sb3JdPVwiYmdDb2xvclwiIFtjb2xvcl09XCJjb2xvclwiPjwvc3RhdGlzdGljcy1saXN0LWJhcj5cbiAgYCxcbiAgc3R5bGVzOiBbXVxufSlcbmV4cG9ydCBjbGFzcyBOZ3hTa2lsbEJhckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgcGVyY2VudGFnZTogbnVtYmVyID0gMDtcbiAgQElucHV0KCkgbnVtYmVyT2ZCYXJzID0gNTtcbiAgQElucHV0KCkgc2hvd0ZpZ3VyZXM6IGJvb2xlYW47XG4gIEBJbnB1dCgpIGJnQ29sb3I6IHN0cmluZztcbiAgQElucHV0KCkgY29sb3I6IHN0cmluZztcbiAgQElucHV0KCkgYmFyV2lkdGg6IG51bWJlcjtcbiAgQElucHV0KCkgZnVsbDogYm9vbGVhbjtcblxuICBzdGFuZGFyV2lkdGhCYXI6IG51bWJlciA9IDIwO1xuICBiYXJzOiBCYXJbXTtcblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgbmdPbkNoYW5nZXMoKSB7XG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy5zdGFuZGFyV2lkdGhCYXIgPSAxMDAgLyB0aGlzLm51bWJlck9mQmFycztcbiAgICB0aGlzLmJhcnMgPSBbLi4udGhpcy5nZW5lcmF0ZUxpbmUoKV07XG4gIH1cblxuICBnZW5lcmF0ZUxpbmUoKSB7XG4gICAgbGV0IGJhcnM6IEJhcltdID0gW107XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gdGhpcy5udW1iZXJPZkJhcnM7IGkrKykge1xuICAgICAgYmFycyA9IFsuLi5iYXJzLCBuZXcgQmFyKHRoaXMuY2FsY3VsYXRlQmFyKGkpKV07XG4gICAgfVxuICAgIHJldHVybiBiYXJzO1xuICB9XG5cbiAgY2FsY3VsYXRlQmFyKGluZGV4QmFyOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGNvbnN0IHN1YnN0cmFjdGlvbiA9XG4gICAgICB0aGlzLnBlcmNlbnRhZ2UgLSAoaW5kZXhCYXIgLSAxKSAqIHRoaXMuc3RhbmRhcldpZHRoQmFyO1xuICAgIGlmICh0aGlzLnBlcmNlbnRhZ2UgPj0gaW5kZXhCYXIgKiB0aGlzLnN0YW5kYXJXaWR0aEJhcikge1xuICAgICAgcmV0dXJuIDEwMDtcbiAgICB9IGVsc2UgaWYgKHN1YnN0cmFjdGlvbiA+IDApIHtcbiAgICAgIHJldHVybiAoc3Vic3RyYWN0aW9uICogMTAwKSAvIHRoaXMuc3RhbmRhcldpZHRoQmFyO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfVxufVxuIl19