import { Component, Input, ChangeDetectorRef, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Bar {
    /**
     * @param {?=} width
     */
    constructor(width = 100) {
        this.width = width;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxSkillBarComponent {
    constructor() {
        this.percentage = 0;
        this.numberOfBars = 5;
        this.standarWidthBar = 20;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.init();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.init();
    }
    /**
     * @return {?}
     */
    init() {
        this.standarWidthBar = 100 / this.numberOfBars;
        this.bars = [...this.generateLine()];
    }
    /**
     * @return {?}
     */
    generateLine() {
        let /** @type {?} */ bars = [];
        for (let /** @type {?} */ i = 1; i <= this.numberOfBars; i++) {
            bars = [...bars, new Bar(this.calculateBar(i))];
        }
        return bars;
    }
    /**
     * @param {?} indexBar
     * @return {?}
     */
    calculateBar(indexBar) {
        const /** @type {?} */ substraction = this.percentage - (indexBar - 1) * this.standarWidthBar;
        if (this.percentage >= indexBar * this.standarWidthBar) {
            return 100;
        }
        else if (substraction > 0) {
            return (substraction * 100) / this.standarWidthBar;
        }
        return 0;
    }
}
NgxSkillBarComponent.decorators = [
    { type: Component, args: [{
                selector: "ngx-skill-bar",
                template: `
    <statistics-list-bar [full]="full" [barWidth]="barWidth" [showFigures]="showFigures" [percentage]="percentage" [bars]="bars" [bgColor]="bgColor" [color]="color"></statistics-list-bar>
  `,
                styles: []
            },] },
];
/** @nocollapse */
NgxSkillBarComponent.ctorParameters = () => [];
NgxSkillBarComponent.propDecorators = {
    percentage: [{ type: Input }],
    numberOfBars: [{ type: Input }],
    showFigures: [{ type: Input }],
    bgColor: [{ type: Input }],
    color: [{ type: Input }],
    barWidth: [{ type: Input }],
    full: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class StatisticsBarComponent {
    /**
     * @param {?} cdr
     */
    constructor(cdr) {
        this.cdr = cdr;
        this.width = 0;
        this.bgColor = "#644d4d";
        this.color = "white";
        this.barWidth = 40;
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    ngOnChanges() { }
}
StatisticsBarComponent.decorators = [
    { type: Component, args: [{
                selector: "statistics-bar",
                template: `<div class="bar" 
  [ngStyle]="{'background-color': bgColor, 'width': barWidth+'px'}">
  <div [ngStyle]="{'width': width+'%', 'background-color': color}"></div>
</div>`,
                styles: [`.bar{background-color:#644d4d;height:9px;width:40px}.bar>div{background-color:#fff;height:9px}`]
            },] },
];
/** @nocollapse */
StatisticsBarComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
StatisticsBarComponent.propDecorators = {
    width: [{ type: Input }],
    bgColor: [{ type: Input }],
    color: [{ type: Input }],
    barWidth: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ DEFAULT_PADDING = 2;
class StatisticsListBarComponent {
    constructor() {
        this.bars = [];
        this.showFigures = false;
        this.percentage = 0;
        this.full = false;
        this.padding = DEFAULT_PADDING;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.full == true) {
            this.padding = 0;
        }
        else {
            this.padding = DEFAULT_PADDING;
        }
    }
    /**
     * @return {?}
     */
    ngOnChanges() { }
}
StatisticsListBarComponent.decorators = [
    { type: Component, args: [{
                selector: "statistics-list-bar",
                template: `<div class="statistics-container">
    <statistics-bar 
        class="statistics-item" 
        *ngFor="let bar of bars"  
        [width]="bar.width" 
        [bgColor]="bgColor" 
        [color]="color" 
        [barWidth]="barWidth"
        [ngStyle]="{'padding': padding+'px'}"
        ></statistics-bar>
    <div class="figures" *ngIf="showFigures">{{percentage}}%</div>
</div>
`,
                styles: [`.statistics-container{display:flex;flex-wrap:wrap}.statistics-item{margin-top:1px;padding:2px}.figures{margin-top:-4px;margin-left:4px}`]
            },] },
];
/** @nocollapse */
StatisticsListBarComponent.ctorParameters = () => [];
StatisticsListBarComponent.propDecorators = {
    bars: [{ type: Input }],
    showFigures: [{ type: Input }],
    percentage: [{ type: Input }],
    bgColor: [{ type: Input }],
    color: [{ type: Input }],
    barWidth: [{ type: Input }],
    full: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxSkillBarModule {
}
NgxSkillBarModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [
                    NgxSkillBarComponent,
                    StatisticsBarComponent,
                    StatisticsListBarComponent
                ],
                exports: [NgxSkillBarComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { NgxSkillBarComponent, NgxSkillBarModule, StatisticsBarComponent as ɵa, StatisticsListBarComponent as ɵb };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,