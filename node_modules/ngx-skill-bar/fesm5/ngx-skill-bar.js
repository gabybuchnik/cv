import { __spread } from 'tslib';
import { Component, Input, ChangeDetectorRef, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var Bar = /** @class */ (function () {
    function Bar(width) {
        if (width === void 0) { width = 100; }
        this.width = width;
    }
    return Bar;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxSkillBarComponent = /** @class */ (function () {
    function NgxSkillBarComponent() {
        this.percentage = 0;
        this.numberOfBars = 5;
        this.standarWidthBar = 20;
    }
    /**
     * @return {?}
     */
    NgxSkillBarComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.init();
    };
    /**
     * @return {?}
     */
    NgxSkillBarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.init();
    };
    /**
     * @return {?}
     */
    NgxSkillBarComponent.prototype.init = /**
     * @return {?}
     */
    function () {
        this.standarWidthBar = 100 / this.numberOfBars;
        this.bars = __spread(this.generateLine());
    };
    /**
     * @return {?}
     */
    NgxSkillBarComponent.prototype.generateLine = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ bars = [];
        for (var /** @type {?} */ i = 1; i <= this.numberOfBars; i++) {
            bars = __spread(bars, [new Bar(this.calculateBar(i))]);
        }
        return bars;
    };
    /**
     * @param {?} indexBar
     * @return {?}
     */
    NgxSkillBarComponent.prototype.calculateBar = /**
     * @param {?} indexBar
     * @return {?}
     */
    function (indexBar) {
        var /** @type {?} */ substraction = this.percentage - (indexBar - 1) * this.standarWidthBar;
        if (this.percentage >= indexBar * this.standarWidthBar) {
            return 100;
        }
        else if (substraction > 0) {
            return (substraction * 100) / this.standarWidthBar;
        }
        return 0;
    };
    NgxSkillBarComponent.decorators = [
        { type: Component, args: [{
                    selector: "ngx-skill-bar",
                    template: "\n    <statistics-list-bar [full]=\"full\" [barWidth]=\"barWidth\" [showFigures]=\"showFigures\" [percentage]=\"percentage\" [bars]=\"bars\" [bgColor]=\"bgColor\" [color]=\"color\"></statistics-list-bar>\n  ",
                    styles: []
                },] },
    ];
    /** @nocollapse */
    NgxSkillBarComponent.ctorParameters = function () { return []; };
    NgxSkillBarComponent.propDecorators = {
        percentage: [{ type: Input }],
        numberOfBars: [{ type: Input }],
        showFigures: [{ type: Input }],
        bgColor: [{ type: Input }],
        color: [{ type: Input }],
        barWidth: [{ type: Input }],
        full: [{ type: Input }]
    };
    return NgxSkillBarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var StatisticsBarComponent = /** @class */ (function () {
    function StatisticsBarComponent(cdr) {
        this.cdr = cdr;
        this.width = 0;
        this.bgColor = "#644d4d";
        this.color = "white";
        this.barWidth = 40;
    }
    /**
     * @return {?}
     */
    StatisticsBarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    StatisticsBarComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () { };
    StatisticsBarComponent.decorators = [
        { type: Component, args: [{
                    selector: "statistics-bar",
                    template: "<div class=\"bar\" \n  [ngStyle]=\"{'background-color': bgColor, 'width': barWidth+'px'}\">\n  <div [ngStyle]=\"{'width': width+'%', 'background-color': color}\"></div>\n</div>",
                    styles: [".bar{background-color:#644d4d;height:9px;width:40px}.bar>div{background-color:#fff;height:9px}"]
                },] },
    ];
    /** @nocollapse */
    StatisticsBarComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    StatisticsBarComponent.propDecorators = {
        width: [{ type: Input }],
        bgColor: [{ type: Input }],
        color: [{ type: Input }],
        barWidth: [{ type: Input }]
    };
    return StatisticsBarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ DEFAULT_PADDING = 2;
var StatisticsListBarComponent = /** @class */ (function () {
    function StatisticsListBarComponent() {
        this.bars = [];
        this.showFigures = false;
        this.percentage = 0;
        this.full = false;
        this.padding = DEFAULT_PADDING;
    }
    /**
     * @return {?}
     */
    StatisticsListBarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.full == true) {
            this.padding = 0;
        }
        else {
            this.padding = DEFAULT_PADDING;
        }
    };
    /**
     * @return {?}
     */
    StatisticsListBarComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () { };
    StatisticsListBarComponent.decorators = [
        { type: Component, args: [{
                    selector: "statistics-list-bar",
                    template: "<div class=\"statistics-container\">\n    <statistics-bar \n        class=\"statistics-item\" \n        *ngFor=\"let bar of bars\"  \n        [width]=\"bar.width\" \n        [bgColor]=\"bgColor\" \n        [color]=\"color\" \n        [barWidth]=\"barWidth\"\n        [ngStyle]=\"{'padding': padding+'px'}\"\n        ></statistics-bar>\n    <div class=\"figures\" *ngIf=\"showFigures\">{{percentage}}%</div>\n</div>\n",
                    styles: [".statistics-container{display:flex;flex-wrap:wrap}.statistics-item{margin-top:1px;padding:2px}.figures{margin-top:-4px;margin-left:4px}"]
                },] },
    ];
    /** @nocollapse */
    StatisticsListBarComponent.ctorParameters = function () { return []; };
    StatisticsListBarComponent.propDecorators = {
        bars: [{ type: Input }],
        showFigures: [{ type: Input }],
        percentage: [{ type: Input }],
        bgColor: [{ type: Input }],
        color: [{ type: Input }],
        barWidth: [{ type: Input }],
        full: [{ type: Input }]
    };
    return StatisticsListBarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxSkillBarModule = /** @class */ (function () {
    function NgxSkillBarModule() {
    }
    NgxSkillBarModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: [
                        NgxSkillBarComponent,
                        StatisticsBarComponent,
                        StatisticsListBarComponent
                    ],
                    exports: [NgxSkillBarComponent]
                },] },
    ];
    return NgxSkillBarModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { NgxSkillBarComponent, NgxSkillBarModule, StatisticsBarComponent as ɵa, StatisticsListBarComponent as ɵb };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,