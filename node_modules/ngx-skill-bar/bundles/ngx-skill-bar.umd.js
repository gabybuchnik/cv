(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-skill-bar', ['exports', '@angular/core', '@angular/common'], factory) :
    (factory((global['ngx-skill-bar'] = {}),global.ng.core,global.ng.common));
}(this, (function (exports,core,common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Bar = (function () {
        function Bar(width) {
            if (width === void 0) {
                width = 100;
            }
            this.width = width;
        }
        return Bar;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgxSkillBarComponent = (function () {
        function NgxSkillBarComponent() {
            this.percentage = 0;
            this.numberOfBars = 5;
            this.standarWidthBar = 20;
        }
        /**
         * @return {?}
         */
        NgxSkillBarComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                this.init();
            };
        /**
         * @return {?}
         */
        NgxSkillBarComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.init();
            };
        /**
         * @return {?}
         */
        NgxSkillBarComponent.prototype.init = /**
         * @return {?}
         */
            function () {
                this.standarWidthBar = 100 / this.numberOfBars;
                this.bars = __spread(this.generateLine());
            };
        /**
         * @return {?}
         */
        NgxSkillBarComponent.prototype.generateLine = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ bars = [];
                for (var /** @type {?} */ i = 1; i <= this.numberOfBars; i++) {
                    bars = __spread(bars, [new Bar(this.calculateBar(i))]);
                }
                return bars;
            };
        /**
         * @param {?} indexBar
         * @return {?}
         */
        NgxSkillBarComponent.prototype.calculateBar = /**
         * @param {?} indexBar
         * @return {?}
         */
            function (indexBar) {
                var /** @type {?} */ substraction = this.percentage - (indexBar - 1) * this.standarWidthBar;
                if (this.percentage >= indexBar * this.standarWidthBar) {
                    return 100;
                }
                else if (substraction > 0) {
                    return (substraction * 100) / this.standarWidthBar;
                }
                return 0;
            };
        NgxSkillBarComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "ngx-skill-bar",
                        template: "\n    <statistics-list-bar [full]=\"full\" [barWidth]=\"barWidth\" [showFigures]=\"showFigures\" [percentage]=\"percentage\" [bars]=\"bars\" [bgColor]=\"bgColor\" [color]=\"color\"></statistics-list-bar>\n  ",
                        styles: []
                    },] },
        ];
        /** @nocollapse */
        NgxSkillBarComponent.ctorParameters = function () { return []; };
        NgxSkillBarComponent.propDecorators = {
            percentage: [{ type: core.Input }],
            numberOfBars: [{ type: core.Input }],
            showFigures: [{ type: core.Input }],
            bgColor: [{ type: core.Input }],
            color: [{ type: core.Input }],
            barWidth: [{ type: core.Input }],
            full: [{ type: core.Input }]
        };
        return NgxSkillBarComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var StatisticsBarComponent = (function () {
        function StatisticsBarComponent(cdr) {
            this.cdr = cdr;
            this.width = 0;
            this.bgColor = "#644d4d";
            this.color = "white";
            this.barWidth = 40;
        }
        /**
         * @return {?}
         */
        StatisticsBarComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @return {?}
         */
        StatisticsBarComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () { };
        StatisticsBarComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "statistics-bar",
                        template: "<div class=\"bar\" \n  [ngStyle]=\"{'background-color': bgColor, 'width': barWidth+'px'}\">\n  <div [ngStyle]=\"{'width': width+'%', 'background-color': color}\"></div>\n</div>",
                        styles: [".bar{background-color:#644d4d;height:9px;width:40px}.bar>div{background-color:#fff;height:9px}"]
                    },] },
        ];
        /** @nocollapse */
        StatisticsBarComponent.ctorParameters = function () {
            return [
                { type: core.ChangeDetectorRef }
            ];
        };
        StatisticsBarComponent.propDecorators = {
            width: [{ type: core.Input }],
            bgColor: [{ type: core.Input }],
            color: [{ type: core.Input }],
            barWidth: [{ type: core.Input }]
        };
        return StatisticsBarComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ DEFAULT_PADDING = 2;
    var StatisticsListBarComponent = (function () {
        function StatisticsListBarComponent() {
            this.bars = [];
            this.showFigures = false;
            this.percentage = 0;
            this.full = false;
            this.padding = DEFAULT_PADDING;
        }
        /**
         * @return {?}
         */
        StatisticsListBarComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (this.full == true) {
                    this.padding = 0;
                }
                else {
                    this.padding = DEFAULT_PADDING;
                }
            };
        /**
         * @return {?}
         */
        StatisticsListBarComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () { };
        StatisticsListBarComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "statistics-list-bar",
                        template: "<div class=\"statistics-container\">\n    <statistics-bar \n        class=\"statistics-item\" \n        *ngFor=\"let bar of bars\"  \n        [width]=\"bar.width\" \n        [bgColor]=\"bgColor\" \n        [color]=\"color\" \n        [barWidth]=\"barWidth\"\n        [ngStyle]=\"{'padding': padding+'px'}\"\n        ></statistics-bar>\n    <div class=\"figures\" *ngIf=\"showFigures\">{{percentage}}%</div>\n</div>\n",
                        styles: [".statistics-container{display:flex;flex-wrap:wrap}.statistics-item{margin-top:1px;padding:2px}.figures{margin-top:-4px;margin-left:4px}"]
                    },] },
        ];
        /** @nocollapse */
        StatisticsListBarComponent.ctorParameters = function () { return []; };
        StatisticsListBarComponent.propDecorators = {
            bars: [{ type: core.Input }],
            showFigures: [{ type: core.Input }],
            percentage: [{ type: core.Input }],
            bgColor: [{ type: core.Input }],
            color: [{ type: core.Input }],
            barWidth: [{ type: core.Input }],
            full: [{ type: core.Input }]
        };
        return StatisticsListBarComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgxSkillBarModule = (function () {
        function NgxSkillBarModule() {
        }
        NgxSkillBarModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        declarations: [
                            NgxSkillBarComponent,
                            StatisticsBarComponent,
                            StatisticsListBarComponent
                        ],
                        exports: [NgxSkillBarComponent]
                    },] },
        ];
        return NgxSkillBarModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.NgxSkillBarComponent = NgxSkillBarComponent;
    exports.NgxSkillBarModule = NgxSkillBarModule;
    exports.ɵa = StatisticsBarComponent;
    exports.ɵb = StatisticsListBarComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,