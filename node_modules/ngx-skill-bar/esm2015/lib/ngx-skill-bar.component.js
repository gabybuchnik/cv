/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input } from "@angular/core";
import { Bar } from "./bar.model";
export class NgxSkillBarComponent {
    constructor() {
        this.percentage = 0;
        this.numberOfBars = 5;
        this.standarWidthBar = 20;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.init();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.init();
    }
    /**
     * @return {?}
     */
    init() {
        this.standarWidthBar = 100 / this.numberOfBars;
        this.bars = [...this.generateLine()];
    }
    /**
     * @return {?}
     */
    generateLine() {
        let /** @type {?} */ bars = [];
        for (let /** @type {?} */ i = 1; i <= this.numberOfBars; i++) {
            bars = [...bars, new Bar(this.calculateBar(i))];
        }
        return bars;
    }
    /**
     * @param {?} indexBar
     * @return {?}
     */
    calculateBar(indexBar) {
        const /** @type {?} */ substraction = this.percentage - (indexBar - 1) * this.standarWidthBar;
        if (this.percentage >= indexBar * this.standarWidthBar) {
            return 100;
        }
        else if (substraction > 0) {
            return (substraction * 100) / this.standarWidthBar;
        }
        return 0;
    }
}
NgxSkillBarComponent.decorators = [
    { type: Component, args: [{
                selector: "ngx-skill-bar",
                template: `
    <statistics-list-bar [full]="full" [barWidth]="barWidth" [showFigures]="showFigures" [percentage]="percentage" [bars]="bars" [bgColor]="bgColor" [color]="color"></statistics-list-bar>
  `,
                styles: []
            },] },
];
/** @nocollapse */
NgxSkillBarComponent.ctorParameters = () => [];
NgxSkillBarComponent.propDecorators = {
    percentage: [{ type: Input }],
    numberOfBars: [{ type: Input }],
    showFigures: [{ type: Input }],
    bgColor: [{ type: Input }],
    color: [{ type: Input }],
    barWidth: [{ type: Input }],
    full: [{ type: Input }]
};
function NgxSkillBarComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    NgxSkillBarComponent.prototype.percentage;
    /** @type {?} */
    NgxSkillBarComponent.prototype.numberOfBars;
    /** @type {?} */
    NgxSkillBarComponent.prototype.showFigures;
    /** @type {?} */
    NgxSkillBarComponent.prototype.bgColor;
    /** @type {?} */
    NgxSkillBarComponent.prototype.color;
    /** @type {?} */
    NgxSkillBarComponent.prototype.barWidth;
    /** @type {?} */
    NgxSkillBarComponent.prototype.full;
    /** @type {?} */
    NgxSkillBarComponent.prototype.standarWidthBar;
    /** @type {?} */
    NgxSkillBarComponent.prototype.bars;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNraWxsLWJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2tpbGwtYmFyLyIsInNvdXJjZXMiOlsibGliL25neC1za2lsbC1iYXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUNwRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBU2xDLE1BQU07SUFZSjswQkFYOEIsQ0FBQzs0QkFDUCxDQUFDOytCQU9DLEVBQUU7S0FHWjs7OztJQUVoQixXQUFXO1FBQ1QsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0tBQ2I7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0tBQ2I7Ozs7SUFFRCxJQUFJO1FBQ0YsSUFBSSxDQUFDLGVBQWUsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUMvQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztLQUN0Qzs7OztJQUVELFlBQVk7UUFDVixxQkFBSSxJQUFJLEdBQVUsRUFBRSxDQUFDO1FBQ3JCLEdBQUcsQ0FBQyxDQUFDLHFCQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUM1QyxJQUFJLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNqRDtRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7S0FDYjs7Ozs7SUFFRCxZQUFZLENBQUMsUUFBZ0I7UUFDM0IsdUJBQU0sWUFBWSxHQUNoQixJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7UUFDMUQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7WUFDdkQsTUFBTSxDQUFDLEdBQUcsQ0FBQztTQUNaO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVCLE1BQU0sQ0FBQyxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDO1NBQ3BEO1FBQ0QsTUFBTSxDQUFDLENBQUMsQ0FBQztLQUNWOzs7WUFuREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxlQUFlO2dCQUN6QixRQUFRLEVBQUU7O0dBRVQ7Z0JBQ0QsTUFBTSxFQUFFLEVBQUU7YUFDWDs7Ozs7eUJBRUUsS0FBSzsyQkFDTCxLQUFLOzBCQUNMLEtBQUs7c0JBQ0wsS0FBSztvQkFDTCxLQUFLO3VCQUNMLEtBQUs7bUJBQ0wsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgT25DaGFuZ2VzIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEJhciB9IGZyb20gXCIuL2Jhci5tb2RlbFwiO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IFwibmd4LXNraWxsLWJhclwiLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxzdGF0aXN0aWNzLWxpc3QtYmFyIFtmdWxsXT1cImZ1bGxcIiBbYmFyV2lkdGhdPVwiYmFyV2lkdGhcIiBbc2hvd0ZpZ3VyZXNdPVwic2hvd0ZpZ3VyZXNcIiBbcGVyY2VudGFnZV09XCJwZXJjZW50YWdlXCIgW2JhcnNdPVwiYmFyc1wiIFtiZ0NvbG9yXT1cImJnQ29sb3JcIiBbY29sb3JdPVwiY29sb3JcIj48L3N0YXRpc3RpY3MtbGlzdC1iYXI+XG4gIGAsXG4gIHN0eWxlczogW11cbn0pXG5leHBvcnQgY2xhc3MgTmd4U2tpbGxCYXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpIHBlcmNlbnRhZ2U6IG51bWJlciA9IDA7XG4gIEBJbnB1dCgpIG51bWJlck9mQmFycyA9IDU7XG4gIEBJbnB1dCgpIHNob3dGaWd1cmVzOiBib29sZWFuO1xuICBASW5wdXQoKSBiZ0NvbG9yOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGNvbG9yOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGJhcldpZHRoOiBudW1iZXI7XG4gIEBJbnB1dCgpIGZ1bGw6IGJvb2xlYW47XG5cbiAgc3RhbmRhcldpZHRoQmFyOiBudW1iZXIgPSAyMDtcbiAgYmFyczogQmFyW107XG5cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICBpbml0KCkge1xuICAgIHRoaXMuc3RhbmRhcldpZHRoQmFyID0gMTAwIC8gdGhpcy5udW1iZXJPZkJhcnM7XG4gICAgdGhpcy5iYXJzID0gWy4uLnRoaXMuZ2VuZXJhdGVMaW5lKCldO1xuICB9XG5cbiAgZ2VuZXJhdGVMaW5lKCkge1xuICAgIGxldCBiYXJzOiBCYXJbXSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IHRoaXMubnVtYmVyT2ZCYXJzOyBpKyspIHtcbiAgICAgIGJhcnMgPSBbLi4uYmFycywgbmV3IEJhcih0aGlzLmNhbGN1bGF0ZUJhcihpKSldO1xuICAgIH1cbiAgICByZXR1cm4gYmFycztcbiAgfVxuXG4gIGNhbGN1bGF0ZUJhcihpbmRleEJhcjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCBzdWJzdHJhY3Rpb24gPVxuICAgICAgdGhpcy5wZXJjZW50YWdlIC0gKGluZGV4QmFyIC0gMSkgKiB0aGlzLnN0YW5kYXJXaWR0aEJhcjtcbiAgICBpZiAodGhpcy5wZXJjZW50YWdlID49IGluZGV4QmFyICogdGhpcy5zdGFuZGFyV2lkdGhCYXIpIHtcbiAgICAgIHJldHVybiAxMDA7XG4gICAgfSBlbHNlIGlmIChzdWJzdHJhY3Rpb24gPiAwKSB7XG4gICAgICByZXR1cm4gKHN1YnN0cmFjdGlvbiAqIDEwMCkgLyB0aGlzLnN0YW5kYXJXaWR0aEJhcjtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH1cbn1cbiJdfQ==